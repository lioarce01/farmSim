// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  sub String @unique
  nickname  String? @unique
  email String @unique
  inventory Inventory?
  balanceToken Int @default(200)
  farm Farm?
  role String
}

model Inventory {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  seeds Seed[]
  waters Water[]
}

model Farm {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  slots Slot[]
}

model Slot {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  farmId String @db.ObjectId
  farm Farm @relation(fields: [farmId], references: [id], onDelete: Cascade)
  seedId String? @db.ObjectId
  seed Seed? @relation(fields: [seedId], references: [id], onDelete: SetNull)
  plantingTime DateTime?
  growthStatus growthStatus
  wateredCount Int @default(0)
  lastWatered DateTime?
  seedName String?
  seedDescription String?
  seedRarity String?
  seedTokensGenerated Int?
  seedImg  String?
}

model Seed {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  description String
  inventoryId String @db.ObjectId
  inventory Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  quantity Int @default(0)
  rarity Rarity
  tokensGenerated Int? @default(0)
  img String?
  Slot Slot[]
}

model Water {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  description String
  quantity Int? @default(0)
  inventoryId String @db.ObjectId
  inventory Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
}

model StoreItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  name String @unique
  description String
  price Int
  itemType ItemType
  rarity Rarity?
  stock Int
  tokensGenerated Int?
  quantity Int?
  img String?
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

enum ItemType {
  seed
  water
}

enum Role {
  USER
  ADMIN
}

enum growthStatus {
  NONE
  GROWING
  READY_TO_HARVEST
  HARVESTED
  WITHERED
  INFECTED
  WATER_NEEDED
}

// model Tool {
//   id        String @id @default(auto()) @map("_id") @db.ObjectId
//   name      String
//   quantity  Int
//   inventoryId String @db.ObjectId
//   inventory   Inventory @relation(fields: [inventoryId], references: [id])
// }

// model Token {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
//   amount String @default("0")
//   tokenOwner User @relation(fields: [tokenOwnerId], references: [id])
//   tokenOwnerId String @unique @db.ObjectId
// }